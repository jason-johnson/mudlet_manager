<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Manager</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Manager Keep</name>
				<script>-- sysConnectionEvent
-- sysLoadEvent</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>just a placeholder</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>0</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Manager</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Loadouts</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>loadouts set &lt;name&gt; &lt;stance&gt; &lt;wield&gt; (&lt;sheath&gt;)</name>
					<script>local lo = {
  name = matches[2],
  wield = matches[4],
  sheath = matches[6],
  stance = matches[3],
}

manager.loadouts.set(lo)</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadouts\s+set\s+(\w+)\s+'(\*|[\w\s:]+)'\s+'([\w\s!:]+)'(\s+'([\w\s:]+)')?\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>loadouts list</name>
					<script>manager.loadouts.list()</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadouts\s+list\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>loadouts clear</name>
					<script>manager.loadouts.clear()</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadouts\s+clear\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>loadouts load &lt;name&gt;</name>
					<script>manager.loadouts.load(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadouts\s+load\s+(\w+)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>loadout actions set &lt;action name&gt; &lt;action&gt;</name>
					<script>manager.loadouts.actions.set(matches[2], matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadout\s+actions\s+set\s+(\S+)\s+([\w\s:']+)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>loadout actions list</name>
					<script>manager.loadouts.actions.list()</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*loadout\s+actions\s+list\s*$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Character</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>characters list</name>
					<script>manager.char.list()</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+list\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>characters add &lt;name&gt; &lt;description&gt;</name>
					<script>manager.char.add(matches[2], matches[4])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+add\s+(\w+)(\s+(.*))?\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>characters load &lt;name&gt;</name>
					<script>manager.char.initialize(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+load\s+(\w+)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>characters delete &lt;name&gt;</name>
					<script>manager.char.delete(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+delete\s+(\w+)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>characters default &lt;name&gt;</name>
					<script>manager.char.set_default_character(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+default\s+(\w+)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>characters loadcmd &lt;char&gt; &lt;command&gt;</name>
					<script>manager.char.add_load_command(matches[2], matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*characters\s+loadcmd\s+(\w+)\s+(.+)\s*$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Targetting</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>prev_target_action</name>
					<script>manager.targetting.prev_target_action(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*prev_target_action\s+(.*)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>target_action</name>
					<script>manager.targetting.target_action(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*target_action\s+(.*)\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>targ &lt;target&gt; (set target)</name>
					<script>manager.targetting.set_target(matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*targ(\s+([.\w]+))?\s*$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>k &lt;target&gt;</name>
					<script>local target = matches[2]
manager.targetting.set_target(target)
manager.targetting.target_action('kill')</script>
					<command></command>
					<packageName></packageName>
					<regex>^\s*k\s+(\S+)\s*$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Manager</name>
			<packageName></packageName>
			<script>function initialize_manager()
  local manager = {}
  
  manager.char_fields = {
    'name',
    'current_loadout',
    'data',
    'load_command',
  }
  
  manager.loadout_fields = {
    'name',
    'wield',
    'sheath',
    'stance'
  }
  
  manager.debug = false

  return manager
end

manager = manager or initialize_manager()</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Initialization</name>
				<packageName></packageName>
				<script>manager.initialization = manager.initialization or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>initialize</name>
					<packageName></packageName>
					<script>function manager.initialization.initialize()
  local mydb = manager.initialization.initialize_db()
  local profile_info = manager.initialization.get_profile_info(mydb)
  
  if profile_info.use_default_char == "true" then
    local character = profile_info.default_char
    manager.initialization.initialize_character(mydb, character)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>initialize db</name>
					<packageName></packageName>
					<script>function manager.initialization.initialize_db()
  local mydb = db:create("char_info", {
    profile_info = {
      use_default_char = "false",
      default_char = "",
      _unique = { "default_char" },
      _violations = "FAIL"
    },
    char_vars = {
      name = "",
      description = "",
      current_loadout = "",
      load_command = "",
      data = "",
      _unique = { "name" },
      _violations = "FAIL"
    },
  })
  manager.initialization.create_tables("char_info")
  
  return mydb
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>create_tables</name>
					<packageName></packageName>
					<script>function manager.initialization.create_tables(db_name_unsafe)
  local sheets = {
    loadouts = [[
      CREATE TABLE IF NOT EXISTS loadouts (
        name TEXT NOT NULL,
        char_name TEXT NOT NULL,
        wield TEXT NOT NULL,
        sheath TEXT NULL,
        stance TEXT NOT NULL,
        PRIMARY KEY (name, char_name),
        FOREIGN KEY (char_name) 
          REFERENCES char_vars (name) 
            ON DELETE CASCADE 
            ON UPDATE NO ACTION);]],
    loadout_actions = [[
      CREATE TABLE IF NOT EXISTS loadout_actions (
        loadout_name TEXT NOT NULL,
        char_name TEXT NOT NULL,
        name TEXT NOT NULL,
        value TEXT NOT NULL,
        PRIMARY KEY (loadout_name, char_name, name),
        FOREIGN KEY (char_name)
          REFERENCES char_vars (name)
            ON DELETE CASCADE
            ON UPDATE NO ACTION,
        FOREIGN KEY (loadout_name)
          REFERENCES loadout (name)
            ON DELETE CASCADE
            ON UPDATE NO ACTION);]]
  }

  local conn = manager.db.get_conn(db_name_unsafe)
  
  for name,sheet in pairs(sheets) do
    local r, err = conn:execute(sheet)
    
    if r == nil then
      echo(f'# Unable to create table {name}: {err}\n')
      return
    end
  end
  
  manager.db.commit(conn)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>initialize_character</name>
					<packageName></packageName>
					<script>function manager.initialization.initialize_character(mydb, character)
  echo(f"\n# loading db for '{character}'\n")
  
  local char_vars = manager.initialization.get_char_vars(mydb, character)
  
  manager.util.copy_fields_to_manager(char_vars, manager.char_fields)
  manager.loadouts.load(manager.current_loadout, true)
  
  if manager.load_command and manager.load_command ~= '' then
    manager.actions.interpret_command(manager.load_command)
  end

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get_profile_info</name>
					<packageName></packageName>
					<script>function manager.initialization.get_profile_info(mydb)

  local profile_info = db:fetch(mydb.profile_info)

  if #profile_info == 0 then
    local r, err = db:add(mydb.profile_info, {
      use_default_char = "false",
      default_char = ""
    })
    
    if not r then
      echo(f'# error creating profile_info: {err}\n')
    end

    echo('\n# new profile_info created\n')

    profile_info = db:fetch(mydb.profile_info)
  end

  return profile_info[1]

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get char vars</name>
					<packageName></packageName>
					<script>function manager.initialization.get_char_vars(mydb, character)

  local char_vars = db:fetch(mydb.char_vars, db:eq(mydb.char_vars.name, character))

  if #char_vars == 0 then
    local r, err = db:add(mydb.char_vars, {
      name = character,
      current_loadout_type = nil,
      current_loadout_index = 0,
      data = nil,
    })
    
    if not r then
      echo(f'# error creating char_vars: {err}\n')
    end

    echo(f'\n# new char_vars "{character}" created\n')

    char_vars = db:fetch(mydb.char_vars, db:eq(mydb.char_vars.name, character))
  end

  return char_vars[1]

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>manager_on_sys_connection_event</name>
					<packageName></packageName>
					<script>function manager_on_sys_connection_event(...)
  if manager and manager.initialization and manager.initialization.initialize then
    manager.initialization.initialize()
  else
    echo('\n\n# Unable to initialize system!\n\n')
  end
end</script>
					<eventHandlerList>
						<string>sysConnectionEvent</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Char</name>
				<packageName></packageName>
				<script>manager.char = manager.char or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>set_default_character</name>
					<packageName></packageName>
					<script>function manager.char.set_default_character(character)
  local mydb = db:get_database("char_info")
  
  if not manager.char.character_exists(mydb, character) then
    echo(f'# No such character: {character}\n')
    return
  end
  
  db:set(mydb.profile_info.default_char, character)
  db:set(mydb.profile_info.use_default_char, "true")
  
  echo(f'\n# character "{character}" is now the default\n')
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>initialize</name>
					<packageName></packageName>
					<script>function manager.char.initialize(character)
  local mydb = db:get_database("char_info")
  
  if not manager.char.character_exists(mydb, character) then
    echo(f'# No such character: {character}\n')
    return
  end
  
  manager.initialization.initialize_character(mydb, character)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>add</name>
					<packageName></packageName>
					<script>function manager.char.add(character, description)
--  db.debug_sql = true
  local mydb = db:get_database("char_info")
  local r, err = db:add(mydb.char_vars, {
    name = character,
    description = description,
  })
    
  if not r then
    echo(f'# error creating char_vars: {err}\n')
  else
    echo(f'\n# new char_vars "{character}" created\n')
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>delete</name>
					<packageName></packageName>
					<script>function manager.char.delete(character)
  local mydb = db:get_database("char_info")
  db:delete(mydb.char_vars, db:eq(mydb.char_vars.name, character))
  
  echo(f'\n# character "{character}" deleted\n')
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>list</name>
					<packageName></packageName>
					<script>function manager.char.list()
  local mydb = db:get_database("char_info")
  local chars = db:fetch(mydb.char_vars)
  
  if #chars == 0 then
    echo("# no chars found\n")
    return
  end
  
  for k, v in pairs(chars) do
    echo(f'# character: {v.name} ({v.description})\n')
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>character_exists</name>
					<packageName></packageName>
					<script>function manager.char.character_exists(mydb, character)
  
  local char_vars = db:fetch(mydb.char_vars, db:eq(mydb.char_vars.name, character))

  return #char_vars ~= 0
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>add_load_command</name>
					<packageName></packageName>
					<script>function manager.char.add_load_command(character, command)
  local mydb = db:get_database("char_info")
  
  if not manager.char.character_exists(mydb, character) then
    echo(f'# No such character: {character}\n')
    return
  end
  
  db:set(mydb.char_vars.load_command, command, db:eq(mydb.char_vars.name, character))
  
  echo(f'\n# character "{character}" now has load command "{command}"\n')
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get_custom_data</name>
					<packageName></packageName>
					<script>function manager.char.get_custom_data()
  if not manager.name or manager.name == nil then
    echo('# No character loaded\n')
    return
  end
  
  if not manager.data or manager.data == '' then
    return {}
  end
  
  return yajl.to_value(manager.data)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>save_custom_data</name>
					<packageName></packageName>
					<script>function manager.char.save_custom_data(data)
  if not manager.name or manager.name == nil then
    echo('# No character loaded\n')
    return
  end
  
  local mydb = db:get_database("char_info")
  
  if not manager.char.character_exists(mydb, manager.name) then
    echo(f'# No such character: {manager.name}\n')
    return
  end
  
  local data_string = yajl.to_string(data)
  
  db:set(mydb.char_vars.data, data_string, db:eq(mydb.char_vars.name, manager.name))
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Loadouts</name>
				<packageName></packageName>
				<script>function initialize_manager_loadouts()
  local loadouts = {}
  
  loadouts.current = {}

  return loadouts
end

manager.loadouts = manager.loadouts or initialize_manager_loadouts()</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>list</name>
					<packageName></packageName>
					<script>function manager.loadouts.list()
  local conn = manager.loadouts.get_conn()
  
  if not conn then return end
  
  local any_exist = false
    
  local cursor,err = conn:execute(f'select * from loadouts where char_name = "{manager.name}"')
  
  if cursor == nil then
    echo(f'# reading loadouts failed: {err}\n')
  end
  
  local row = cursor:fetch ({}, "a")
  
  while row do
    any_exist = true
    echo(f'# loadout: {row.name} - ')
    manager.util.echo_table(row, {'stance', 'wield', 'sheath'})
    echo('\n')
    row = cursor:fetch (row, "a")
  end
  
  if not any_exist then
    echo("# no loadouts found\n")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>set</name>
					<packageName></packageName>
					<script>function manager.loadouts.set(record)
  local conn = manager.loadouts.get_conn()
  
  if not conn then return end
  
  local sheath = 'NULL'
  
  if record.sheath then
    sheath = f'"{record.sheath}"'
  end
  
  local r,err = conn:execute(f[[
    REPLACE INTO loadouts(char_name, name, wield, sheath, stance)
    values("{manager.name}", "{record.name}", "{record.wield}", {sheath}, "{record.stance}")
  ]])
  
  if r == nil then
    echo(f'# adding loadout failed: {err}\n')
  else
    echo(f"# loadout: '{record.name}' set\n")
  end
  
  manager.db.commit(conn)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>clear</name>
					<packageName></packageName>
					<script>function manager.loadouts.clear()
  manager.loadouts.actions.clear()
  
  local conn = manager.loadouts.get_conn()
  
  if not conn then return end
  
  local r,err = conn:execute(f'delete from loadouts where char_name = "{manager.name}"')
  
  if r == nil then
    echo(f'# clearing loadouts failed: {err}\n')
    return
  end
  
  manager.db.commit(conn)
  manager.current_loadout = nil
  
  echo("# loadouts cleared\n")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>load</name>
					<packageName></packageName>
					<script>function manager.loadouts.load(name, skip_actions)
  if skip_actions == nil and manager.current_loadout and manager.current_loadout == name then
    echo(f'# loadout "{name}" already active\n')
    return
  end
  
  local loadout = manager.loadouts.get(name)
  
  if not loadout then
    echo(f'# Loadout "{name}" not found\n')
    return
  end
  
  if skip_actions == nil then
    local prev = manager.loadouts.current
    local change_stance = loadout.stance ~= '*'
    local need_wield = loadout.wield ~= '!'
    local need_sheath = prev and prev.sheath and prev.sheath ~= nil
    
    if need_sheath and loadout.wield == '!' then need_sheath = false end
  
    if prev and prev.name and prev.name ~= '' then
      if change_stance and loadout.stance == prev.stance then
        change_stance = false
      end
    
      if need_wield and loadout.wield == prev.wield then
        need_wield = false
        need_sheath = false
      end
    end
  
    if change_stance then manager.actions.interpret_command(loadout.stance) end
    if need_sheath then manager.actions.interpret_command(prev.sheath) end
    if need_wield then manager.actions.interpret_command(loadout.wield) end
    
    -- This makes sure we don't switch when going back to an existing stance
    if loadout.stance == '*' then loadout.stance = prev.stance end
    -- This makes sure we keep the setup when weapons dont change
    if loadout.wield == '!' then
      loadout.wield = prev.wield
      loadout.sheath = prev.sheath
    end
  end
  
  manager.loadouts.current = loadout
  manager.current_loadout = loadout.name
  manager.loadouts.actions.load()
  
  local mydb = db:get_database("char_info")
  db:set(mydb.char_vars.current_loadout, loadout.name, db:eq(mydb.char_vars.name, manager.name))
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get</name>
					<packageName></packageName>
					<script>function manager.loadouts.get(name)
  local conn = manager.loadouts.get_conn()
  
  if not conn then return end

  local cursor,err = conn:execute(f'select * from loadouts where char_name = "{manager.name}" and name = "{name}"')
  
  if cursor == nil then
    echo(f'# getting loadout failed: {err}\n')
  end
  
  local row = cursor:fetch ({}, "a")
  local result = nil
  local already_loaded = false
  
  while row do
    if already_loaded then
      echo(f'# Impossible: loadout with name "{name}" has multiple records\n')
      return
    end
    result = manager.util.copy_table(row, manager.loadout_fields)
    already_loaded = true
    row = cursor:fetch (row, "a")
  end
  
  return result
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get_conn</name>
					<packageName></packageName>
					<script>function manager.loadouts.get_conn()
  if not manager.name or manager.name == nil then
    echo('# No character loaded\n')
    return
  end
  
  local db_name = "char_info"
  local mydb = db:get_database(db_name)
  local conn = manager.db.get_conn(db_name)
  
  return conn
end</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Actions</name>
					<packageName></packageName>
					<script>function initialize_manager_loadouts_actions()
  local actions = {}
  
  actions.current = {}

  return actions
end

manager.loadouts.actions = manager.loadouts.actions or initialize_manager_loadouts_actions()</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>list</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.list()
  echo(f'# Loadout: {manager.current_loadout}\n')
  
  local any_exist = manager.loadouts.actions.each(function(row) echo(f'#\taction: {row.name} = {row.value}\n') end)
  
  if not any_exist then
    echo("#\tnone\n")
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>set</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.set(name, value)
  local conn = manager.loadouts.actions.get_conn()
  
  if not conn then return end
  
  local sql = f[[
    REPLACE INTO loadout_actions(char_name, loadout_name, name, value)
    values("{manager.name}", "{manager.current_loadout}", "{name}", "{value}")
  ]]
  
  local r,err = conn:execute(sql)
  
  if r == nil then
    echo(f'# adding loadout action failed: {err}\n')
    echo(f'\n# SQL: {sql}\n')
  else
    echo(f"# loadout action: '{name}' set for loadout '{manager.current_loadout}'\n")
  end
  
  manager.db.commit(conn)
  
  manager.loadouts.actions.current[name] = value
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>get_conn</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.get_conn()
  if not manager.name or manager.name == nil then
    echo('# No character loaded\n')
    return
  end
  
  if not manager.current_loadout or manager.current_loadout == nil or manager.current_loadout == '' then
    echo('# No loadout loaded\n')
    return
  end
  
  local db_name = "char_info"
  local mydb = db:get_database(db_name)
  local conn = manager.db.get_conn(db_name)
  
  return conn
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>clear</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.clear()
  local conn = manager.loadouts.actions.get_conn()
  
  if not conn then return end
  
  local r,err = conn:execute(f'delete from loadout_actions where char_name = "{manager.name}"')
  
  if r == nil then
    echo(f'# clearing loadout actions failed: {err}\n')
    return
  end
  
  manager.db.commit(conn)
  
  echo("# loadout actions cleared\n")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>each</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.each(fun)
  local conn = manager.loadouts.actions.get_conn()
  
  if not conn then return end
  
  local any_exist = false
    
  local cursor,err = conn:execute(f'select * from loadout_actions where char_name = "{manager.name}" and loadout_name = "{manager.current_loadout}"')
  
  if cursor == nil then
    echo(f'# reading loadout actions failed: {err}\n')
  end
  
  local row = cursor:fetch ({}, "a")
  
  while row do
    any_exist = true
    fun(row)
    row = cursor:fetch (row, "a")
  end
  
  return any_exist
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>load</name>
						<packageName></packageName>
						<script>function manager.loadouts.actions.load()
  local current = {}
  
  manager.loadouts.actions.each(function(row) current[row.name] = row.value end)
  
  manager.loadouts.actions.current = current
  
  if current.message then echo(f'# {current.message}\n') end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Misc</name>
				<packageName></packageName>
				<script>manager.misc = manager.misc or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>highlight</name>
					<packageName></packageName>
					<script>function manager.misc.highlight(cg, txt, color)
  color = color or "white"
  selectCaptureGroup(cg)
  fg(color)
  replace(string.upper(txt))
  manager.misc.resetFormatting()
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>resetFormatting</name>
					<packageName></packageName>
					<script>function manager.misc.resetFormatting()
  deselect()
  resetFormat()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>replaceCurrentLine</name>
					<packageName></packageName>
					<script>function manager.misc.replaceCurrentLine(txt, color)
  color = color or "white"
  selectString(line, 1)
  fg(color)
  replace(txt)
  manager.misc.resetFormatting()
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>freplaceCurrentLine</name>
					<packageName></packageName>
					<script>function manager.misc.freplaceCurrentLine(txt)
  selectCurrentLine()
  replace("")
  cecho(txt .. "\n")
  manager.misc.resetFormatting()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>replaceCaptureGroup</name>
					<packageName></packageName>
					<script>function manager.misc.replaceCaptureGroup(txt, group, color)
  group = group or 2
  color = color or "white"
  selectCaptureGroup(group)
  fg(color)
  replace(txt)
  manager.misc.resetFormatting()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>announce_variable</name>
					<packageName></packageName>
					<script>function manager.misc.announce_variable(name, value, is_boolean)
  if not value then
    if is_boolean then
      value = "false"
    else
      value = "&lt;nil&gt;"
    end
  end
  
  echo(f'# {name} now set to: "{value}"\n')
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Actions</name>
				<packageName></packageName>
				<script>manager.actions = manager.actions or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>interpret_command</name>
					<packageName></packageName>
					<script>function manager.actions.interpret_command(action)
  local act_table = action:split(":")
  
  if #act_table &lt; 2 then
    echo(f'# expected action format of &lt;cmd&gt;:&lt;action&gt;(:&lt;extra&gt;?), got: "{action}"\n')
    return nil
  end
  
  local weapon = nil
  local command = nil
  local enhance = #act_table == 3
  
  if act_table[1] == 'e' then
    expandAlias(act_table[2], manager.debug)
  elseif act_table[1] == 'c' then
    send(act_table[2])
  else
    echo(string.format('# got unexpected command: "%s"\n', act_table[1]))
    return nil
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>perform_action</name>
					<packageName></packageName>
					<script>function manager.actions.perform_action(field)
  local cmd = manager.actions.find_action(field)
  if cmd then
    manager.actions.interpret_command(cmd)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>find_action</name>
					<packageName></packageName>
					<script>function manager.actions.find_action(field)
  if table.contains(manager.loadouts.actions.current, field) then
    local cmd = manager.loadouts.actions.current[field]
    return cmd
  else
    echo(f'# No action "{field}" defined:\n')
    for k,v in pairs(manager.loadouts.actions.current) do
      echo(f'#\t{k} = {v}\n')
    end
    return nil
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>DB</name>
				<packageName></packageName>
				<script>manager.db = manager.db or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>get_conn</name>
					<packageName></packageName>
					<script>function manager.db.get_conn(db_name_unsafe)
  local db_name = db:safe_name(db_name_unsafe)
  return db.__conn[db_name]
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>commit</name>
					<packageName></packageName>
					<script>function manager.db.commit(conn)
  local r, err = conn:commit()
  
  if r == nil then
    echo(f'# db commit failed: {err}\n')
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Util</name>
				<packageName></packageName>
				<script>manager.util = manager.util or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>copy_table</name>
					<packageName></packageName>
					<script>function manager.util.copy_table(tbl, fields)
  result = {}
  
  for _, field in ipairs(fields) do
    result[field] = tbl[field]
  end
  
  return result
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>copy_fields_to_manager</name>
					<packageName></packageName>
					<script>function manager.util.copy_fields_to_manager(tbl, fields)
  for _, field in ipairs(fields) do
    manager[field] = tbl[field]
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>echo_table</name>
					<packageName></packageName>
					<script>function manager.util.echo_table(tbl, fields)
  local first_char = ''
  for _, field in ipairs(fields) do
    local v = tbl[field]
    if v == nil or v == '' then
      v = 'nil'
    else
      v = f'"{v}"'
    end
    echo(f'{first_char}{field} = {v}')
    first_char = ', '
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Targetting</name>
				<packageName></packageName>
				<script>function initialize_manager_targetting()
  local targetting = {}
  
  targetting.target = 'target'
  targetting.prev_target = 'target'

  return targetting
end

manager.targetting = manager.targetting or initialize_manager_targetting()</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>prev_target_action</name>
					<packageName></packageName>
					<script>function manager.targetting.prev_target_action(action)
  manager.targetting.set_target(manager.targetting.prev_target)
  expandAlias(f'{action} {manager.targetting.target}')
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>target_action</name>
					<packageName></packageName>
					<script>function manager.targetting.target_action(action)
  expandAlias(f'{action} {manager.targetting.target}')
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>set_target</name>
					<packageName></packageName>
					<script>function manager.targetting.set_target(target)
  manager.targetting.prev_target = manager.targetting.target
  manager.targetting.target = target
  manager.misc.announce_variable('target', target)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Doors</name>
				<packageName></packageName>
				<script>function initialize_manager_doors()
  local doors = {}

  doors.use_mapper = true

  doors.door_names = {
    ["north"] = "exit n",
    ["south"] = "exit s",
    ["east"] = "exit e",
    ["west"] = "exit w",
    ["up"] = "exit u",
    ["down"] = "exit d"
  }

  return doors
end

manager.doors = manager.doors or initialize_manager_doors()</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>set_door_name</name>
					<packageName></packageName>
					<script>function manager.doors.set_door_name(name, value)
  manager.doors.door_names[name] = value
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>get_door_name</name>
					<packageName></packageName>
					<script>function manager.doors.get_door_name(name)
  return manager.doors.door_names[name]
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>act_door_name</name>
					<packageName></packageName>
					<script>function manager.doors.act_door_name(act, alt_act, name)
  if manager.doors.use_mapper
  then
    expandAlias(f'{alt_act} {string.sub(name, 1, 1)}')
  else
    local door_name = manager.doors.get_door_name(name)
    send(f'{act} {door_name}')
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>open_door</name>
					<packageName></packageName>
					<script>function manager.doors.open_door(name)
  manager.doors.act_door_name("op", "_open", name)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>close_door</name>
					<packageName></packageName>
					<script>function manager.doors.close_door(name)
  manager.doors.act_door_name("cl", "_close", name)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>pick_door</name>
					<packageName></packageName>
					<script>function manager.doors.pick_door(name)
  manager.doors.act_door_name("pi", "_pick", name)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>lock_door</name>
					<packageName></packageName>
					<script>function manager.doors.lock_door(name)
  manager.doors.act_door_name("lock", "_lock", name)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>unlock_door</name>
					<packageName></packageName>
					<script>function manager.doors.unlock_door(name)
  manager.doors.act_door_name("unl", "_unlock", name)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>special_door</name>
					<packageName></packageName>
					<script>function manager.doors.special_door(name)
  local cmd = manager.actions.find_action('door_special') or 'exit'
  local map_cmd = manager.actions.find_action('door_special_mapper') or '_exit'
  manager.doors.act_door_name(cmd, map_cmd, name)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Manager</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Actions</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>KP5 (action: main)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('main_n')</script>
					<command></command>
					<keyCode>53</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP5+Ctrl (action: main_followers)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('main_followers')</script>
					<command></command>
					<keyCode>53</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP5+Shift (action: main_alt)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('main_alt')</script>
					<command></command>
					<keyCode>16777227</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP5+Alt  (action: main_prev)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('main_prev')</script>
					<command></command>
					<keyCode>53</keyCode>
					<keyModifier>671088640</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP7 (action: loadout_1)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('loadout_1')</script>
					<command></command>
					<keyCode>55</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP7+Shift (action: loadout_2)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('loadout_2')</script>
					<command></command>
					<keyCode>16777232</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP7+Ctrl (action: loadout_alt)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('loadout_alt')</script>
					<command></command>
					<keyCode>55</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP+ (action: fast_n)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_n')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP+ +Shift (action: fast_shift)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_shift')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>570425344</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP++Ctrl (action: fast_alt)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_alt')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP+ +Ctrl+Shift (action: fast_alt_shift)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_alt_shift')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>637534208</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP+ +Alt (action: fast_n_prev)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_n_prev')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>671088640</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP+ +Ctrl+Alt (action: fast_alt_prev)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('fast_alt_prev')</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>738197504</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP- (action: slow_n)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('slow_n')</script>
					<command></command>
					<keyCode>45</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP-+Ctrl (action: slow_alt)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('slow_alt')</script>
					<command></command>
					<keyCode>45</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP-+Ctrl+Shift (action: slow_alt_shift)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('slow_alt_shift')</script>
					<command></command>
					<keyCode>45</keyCode>
					<keyModifier>637534208</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP-+Alt (action: slow_n_prev)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('slow_n_prev')</script>
					<command></command>
					<keyCode>45</keyCode>
					<keyModifier>671088640</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP1 (action: mood_n)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('mood_n')</script>
					<command></command>
					<keyCode>49</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP1+Shift (action: mood_shift)</name>
					<packageName></packageName>
					<script>manager.actions.perform_action('mood_shift')</script>
					<command></command>
					<keyCode>16777233</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Status</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>KP. (score)</name>
					<packageName></packageName>
					<script></script>
					<command>sc</command>
					<keyCode>46</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP.+Shift (stat)</name>
					<packageName></packageName>
					<script></script>
					<command>stat</command>
					<keyCode>16777223</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP.+Ctrl (info)</name>
					<packageName></packageName>
					<script></script>
					<command>inf</command>
					<keyCode>46</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>KP.+Meta (prac)</name>
					<packageName></packageName>
					<script></script>
					<command>prac</command>
					<keyCode>46</keyCode>
					<keyModifier>805306368</keyModifier>
				</Key>
			</KeyGroup>
			<Key isActive="yes" isFolder="no">
				<name>Manager debugging</name>
				<packageName></packageName>
				<script>manager.debug = not manager.debug
db.debug_sql = manager.debug

manager.misc.announce_variable('manager.debug', manager.debug, true)</script>
				<command></command>
				<keyCode>16777275</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
